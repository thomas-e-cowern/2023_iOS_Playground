/// NOTE: THIS FILE IS AUTO-GENERATED BY dev/generate-postgresrow-multi-decode.sh

extension PostgresRow {
    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0) {
        precondition(self.columns.count >= 1)
        let columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        let column = columnIterator.next().unsafelyUnwrapped
        let swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable>(_: (T0).Type, file: String = #fileID, line: Int = #line) throws -> (T0) {
        try self.decode(T0.self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1) {
        precondition(self.columns.count >= 2)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable>(_: (T0, T1).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1) {
        try self.decode((T0, T1).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2) {
        precondition(self.columns.count >= 3)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable>(_: (T0, T1, T2).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2) {
        try self.decode((T0, T1, T2).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3) {
        precondition(self.columns.count >= 4)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable>(_: (T0, T1, T2, T3).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3) {
        try self.decode((T0, T1, T2, T3).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4) {
        precondition(self.columns.count >= 5)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3, r4)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable>(_: (T0, T1, T2, T3, T4).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4) {
        try self.decode((T0, T1, T2, T3, T4).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5) {
        precondition(self.columns.count >= 6)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3, r4, r5)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable>(_: (T0, T1, T2, T3, T4, T5).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5) {
        try self.decode((T0, T1, T2, T3, T4, T5).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6) {
        precondition(self.columns.count >= 7)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3, r4, r5, r6)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable>(_: (T0, T1, T2, T3, T4, T5, T6).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6) {
        try self.decode((T0, T1, T2, T3, T4, T5, T6).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7) {
        precondition(self.columns.count >= 8)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3, r4, r5, r6, r7)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable>(_: (T0, T1, T2, T3, T4, T5, T6, T7).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7) {
        try self.decode((T0, T1, T2, T3, T4, T5, T6, T7).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8) {
        precondition(self.columns.count >= 9)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3, r4, r5, r6, r7, r8)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8) {
        try self.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) {
        precondition(self.columns.count >= 10)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3, r4, r5, r6, r7, r8, r9)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) {
        try self.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable, T10: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) {
        precondition(self.columns.count >= 11)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 10
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T10.self
            let r10 = try T10._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable, T10: PostgresDecodable>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) {
        try self.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable, T10: PostgresDecodable, T11: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) {
        precondition(self.columns.count >= 12)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 10
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T10.self
            let r10 = try T10._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 11
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T11.self
            let r11 = try T11._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable, T10: PostgresDecodable, T11: PostgresDecodable>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) {
        try self.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable, T10: PostgresDecodable, T11: PostgresDecodable, T12: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) {
        precondition(self.columns.count >= 13)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 10
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T10.self
            let r10 = try T10._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 11
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T11.self
            let r11 = try T11._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 12
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T12.self
            let r12 = try T12._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable, T10: PostgresDecodable, T11: PostgresDecodable, T12: PostgresDecodable>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) {
        try self.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable, T10: PostgresDecodable, T11: PostgresDecodable, T12: PostgresDecodable, T13: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) {
        precondition(self.columns.count >= 14)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 10
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T10.self
            let r10 = try T10._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 11
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T11.self
            let r11 = try T11._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 12
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T12.self
            let r12 = try T12._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 13
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T13.self
            let r13 = try T13._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable, T10: PostgresDecodable, T11: PostgresDecodable, T12: PostgresDecodable, T13: PostgresDecodable>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) {
        try self.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13).self, context: .default, file: file, line: line)
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable, T10: PostgresDecodable, T11: PostgresDecodable, T12: PostgresDecodable, T13: PostgresDecodable, T14: PostgresDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) {
        precondition(self.columns.count >= 15)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 10
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T10.self
            let r10 = try T10._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 11
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T11.self
            let r11 = try T11._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 12
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T12.self
            let r12 = try T12._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 13
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T13.self
            let r13 = try T13._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 14
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T14.self
            let r14 = try T14._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            return (r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
    public func decode<T0: PostgresDecodable, T1: PostgresDecodable, T2: PostgresDecodable, T3: PostgresDecodable, T4: PostgresDecodable, T5: PostgresDecodable, T6: PostgresDecodable, T7: PostgresDecodable, T8: PostgresDecodable, T9: PostgresDecodable, T10: PostgresDecodable, T11: PostgresDecodable, T12: PostgresDecodable, T13: PostgresDecodable, T14: PostgresDecodable>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14).Type, file: String = #fileID, line: Int = #line) throws -> (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) {
        try self.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14).self, context: .default, file: file, line: line)
    }
}
